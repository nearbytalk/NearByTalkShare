package org.nearbytalk.identity;

import java.lang.reflect.Type;
import java.util.Date;

import org.nearbytalk.runtime.GsonThreadInstance;
import org.nearbytalk.util.DigestUtility;
import org.nearbytalk.util.Utility;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;

/**
 * 
 * UserInfo which comes from other client (currently http browser)
 * 
 * json of ClientUserInfo is special,idBytes serialized as string which makes
 * SHA-1 looks pretty
 * 
 */
public class ClientUserInfo extends BaseUserInfo implements Cloneable,IStatistical {

	/**
	 * 
	 * only used for status , not for client or from client
	 */
	private Date createDate;
	
	private Integer talkNumber;

	private String description="";
	
	private boolean randomUser;

	public ClientUserInfo(String userName, byte[] idBytes) {
		super(DigestUtility.byteArrayToHexString(idBytes),userName);
	}

	public ClientUserInfo(String userName, String idBytes) {
		super(idBytes,userName);
	}

	@Override
	public void digestId() {
		// TODO Auto-generated method stub

	}

	@Override
	public Date getCreateDate() {
		return createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	public static void main(String[] args) {
		System.out.println(GsonThreadInstance.FULL_GSON.get().toJson(
				new ClientUserInfo("adf", DigestUtility.oneTimeDigest("bad"))));
	}

	@Override
	public String toString() {
		return "id:" + Utility.idBytesToString(getIdBytes()) + "| userName:" + getUserName()
				+ " |description:" + description;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public boolean isRandomUser() {
		return randomUser;
	}

	public void setRandomUser(boolean randomUser) {
		this.randomUser = randomUser;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((createDate == null) ? 0 : createDate.hashCode());
		result = prime * result
				+ ((description == null) ? 0 : description.hashCode());
		result = prime * result + (randomUser ? 1231 : 1237);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		//we should ignore create date field when compare
		//this field is first generated by datestore, for query only
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		ClientUserInfo other = (ClientUserInfo) obj;
		if (createDate == null) {
			if (other.createDate != null)
				return false;
		}else if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (randomUser != other.randomUser)
			return false;
		return true;
	}
	
	public boolean sameIgnoreIdBytes(ClientUserInfo other){
		if (this == other)
			return true;
		if (!super.sameStrippedUser(other))
			return false;
		
		if (createDate == null) {
			if (other.createDate != null)
				return false;
		} else if (!Utility.dateFuzzySame(createDate, other.createDate))
			return false;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (randomUser != other.randomUser)
			return false;
		return true;
	}
	
		
	/**
	 * only compare userName and idBytes. do not check null values
	 * @param lhs
	 * @param rhs
	 * @return
	 */
	public static boolean weakSame(ClientUserInfo lhs,ClientUserInfo rhs){

		return lhs.getUserName().equals(rhs.getUserName())
				&& lhs.getIdBytes().equals(rhs.getIdBytes());

	}

	@Override
	public ClientUserInfo clone() {
		
		ClientUserInfo ret=new ClientUserInfo(getUserName(), getIdBytes());
		
		ret.createDate=(Date) (createDate==null?null:createDate.clone());
		ret.description=description;
		ret.randomUser=randomUser;
		
		return ret;
	}

	public Integer getTalkNumber() {
		return talkNumber;
	}

	public void setTalkNumber(Integer talkNumber) {
		this.talkNumber = talkNumber;
	}
	
	public static final JsonSerializer<ClientUserInfo> STRIP_ID_BYTES_JSON_SERIALIZER= new JsonSerializer<ClientUserInfo>() {

		@Override
		public JsonElement serialize(ClientUserInfo src, Type arg1,
				JsonSerializationContext context) {
			JsonObject ret = new JsonObject();
			ret.addProperty(USER_NAME_JSON_KEY,src.getUserName());
			ret.addProperty("description",
					src.getDescription());
			ret.add("createDate", context.serialize(src
					.getCreateDate()));
			ret.addProperty("talkNumber",
					src.getTalkNumber());

			return ret;
		}
	};

}
