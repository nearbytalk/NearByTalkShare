 /* table to store user infomation */ 
CREATE TABLE "CLIENT_USER_INFO"(
/*unique identify of a user,must unique*/
"ID_BYTES" VARCHAR(40) PRIMARY KEY NOT NULL CHECK(length(ID_BYTES)=40),
/*also unique in one host*/
 "USER_NAME" VARCHAR(40) NOT NULL CHECK(length(USER_NAME)!=0)  UNIQUE ,
 "CREATE_DATE" TIMESTAMP NOT NULL check(DATETIME("CREATE_DATE") IS NOT NULL) DEFAULT CURRENT_TIMESTAMP,
 "TALK_NUMBER" INTEGER NOT NULL CHECK(typeof("TALK_NUMBER") = 'integer') DEFAULT 0,
 "DESCRIPTION" TEXT NOT NULL CHECK(length(DESCRIPTION)<200) ,
 "RANDOM_USER" BOOLEAN NOT NULL);
 
 
/*fts table to do fast user lookup */
CREATE VIRTUAL TABLE FTS_CLIENT_USER_INFO USING fts4(
  USER_NAME ,DESCRIPTION,tokenize=mozporter);

/*auto update fts table when insert new user */
CREATE TRIGGER "CLIENT_USER_INFO_INSERT_TO_CACHE" AFTER INSERT ON "CLIENT_USER_INFO" BEGIN
INSERT INTO FTS_CLIENT_USER_INFO (USER_NAME,DESCRIPTION,ROWID) VALUES(NEW.USER_NAME,NEW.DESCRIPTION,NEW.ROWID);
END; 

/*auto delete fts table when insert new user */
CREATE TRIGGER "CLIENT_USER_INFO_DELETE_TO_CACHE" BEFORE DELETE ON "CLIENT_USER_INFO" BEGIN
DELETE FROM FTS_CLIENT_USER_INFO WHERE DOCID=OLD.ROWID;
END;
 
 
CREATE TABLE "MESSAGE_TYPE"  (
"ID" INTEGER PRIMARY KEY NOT NULL ,
"VALUE" VARCHAR(10) 
);


/*store all type of messages*/
CREATE TABLE "ABSTRACT_MESSAGE" (
"ID_BYTES" VARCHAR(40) PRIMARY KEY NOT NULL CHECK(length(ID_BYTES)=40), 
/*for text message ,this is the content. for file message, this is the filename*/
"PLAIN_TEXT" TEXT NOT NULL CHECK(length(PLAIN_TEXT)!=0), 
"SENDER_ID_BYTES" VARCHAR(40) NOT NULL CHECK(length(SENDER_ID_BYTES)=40),
"MESSAGE_TYPE_ID" INTEGER NOT NULL CHECK(typeof("MESSAGE_TYPE_ID") = 'integer'), 
"CREATE_DATE" TIMESTAMP NOT NULL check(DATETIME("CREATE_DATE") IS NOT NULL),
/*if not null ,reference the other message*/
"REFERENCE_ID_BYTES" VARCHAR(40) CHECK(ID_BYTES != REFERENCE_ID_BYTES), 
/*how many depth of reference list (including self). if no, this value is 1*/
"REFERENCE_DEPTH" INTEGER NOT NULL  check(typeof("REFERENCE_DEPTH") = 'integer')  DEFAULT 1,
"REFERENCED_COUNTER" INTEGER NOT NULL CHECK(typeof("REFERENCED_COUNTER") = 'integer') DEFAULT 0,
"AGREE_COUNTER" INTEGER NOT NULL CHECK(typeof("AGREE_COUNTER") = 'integer') DEFAULT 0,
"DISAGREE_COUNTER" INTEGER NOT NULL CHECK(typeof("DISAGREE_COUNTER") = 'integer') DEFAULT 0,

FOREIGN KEY(SENDER_ID_BYTES) REFERENCES CLIENT_USER_INFO(ID_BYTES),
FOREIGN KEY(MESSAGE_TYPE_ID) REFERENCES MESSAGE_TYPE(ID),
FOREIGN KEY(REFERENCE_ID_BYTES) REFERENCES ABSTRACT_MESSAGE(ID_BYTES));


CREATE TABLE "META_TABLE" (
"KEY" VARCHAR(40) PRIMARY KEY NOT NULL,
"VALUE"
);


/*index on create_date for fast preload newest*/
CREATE INDEX ABSTRACT_MESSAGE_CREATE_DATE_INDEX ON ABSTRACT_MESSAGE(CREATE_DATE DESC);

/*index on message_type for fast select typed message*/ 
CREATE INDEX ABSTRACT_MESSAGE_MESSAGE_TYPE_ID_INDEX ON ABSTRACT_MESSAGE(MESSAGE_TYPE_ID);

/*fts table to lookup message fast*/
CREATE VIRTUAL TABLE FTS_ABSTRACT_MESSAGE USING fts4(
 ID_BYTES , PLAIN_TEXT ,tokenize=mozporter);



/*table to lookup message by cross index*/
CREATE VIRTUAL TABLE FTS_TOPIC USING fts4(
     ID_BYTES,TOPIC,tokenize=mozporter
);


/*TODO merge multi action into single trigger */
CREATE TRIGGER "ABSTRACT_MESSAGE_INSERT_TO_CACHE" AFTER INSERT ON "ABSTRACT_MESSAGE" BEGIN
INSERT INTO FTS_ABSTRACT_MESSAGE (ID_BYTES,PLAIN_TEXT,ROWID) VALUES(NEW.ID_BYTES,NEW.PLAIN_TEXT,NEW.ROWID);
END;

CREATE TRIGGER "ABSTRACT_MESSAGE_DELETE_TO_CACHE" BEFORE DELETE ON "ABSTRACT_MESSAGE" BEGIN
DELETE FROM FTS_ABSTRACT_MESSAGE WHERE ROWID=OLD.ROWID;
END;

CREATE TRIGGER "ABSTRACT_MESSAGE_DELETE_TO_TOPIC" BEFORE DELETE ON "ABSTRACT_MESSAGE" BEGIN
DELETE FROM FTS_TOPIC WHERE ID_BYTES=OLD.ID_BYTES;
END;

/*auto update client_user_info.talk_number .only increase, delete message should not decrease talk number*/
CREATE TRIGGER "ABSTRACT_MESSAGE_UPDATE_TALK_NUMBER" AFTER INSERT ON "ABSTRACT_MESSAGE" BEGIN
UPDATE CLIENT_USER_INFO SET TALK_NUMBER=(SELECT TALK_NUMBER+1 FROM CLIENT_USER_INFO WHERE ID_BYTES=NEW.SENDER_ID_BYTES) WHERE ID_BYTES=NEW.SENDER_ID_BYTES;
END;
 


CREATE TRIGGER "ABSTRACT_MESSAGE_DELETE_DEPENDENCE" AFTER DELETE ON "ABSTRACT_MESSAGE"
BEGIN
DELETE FROM ABSTRACT_MESSAGE WHERE REFERENCE_ID_BYTES = OLD.ID_BYTES;
END;

CREATE TRIGGER "ABSTRACT_MESSAGE_UPDATE_REFERENCED_COUNTER" AFTER INSERT ON "ABSTRACT_MESSAGE"
WHEN NEW.REFERENCE_ID_BYTES IS NOT NULL
BEGIN
UPDATE ABSTRACT_MESSAGE SET REFERENCED_COUNTER=REFERENCED_COUNTER+1 WHERE ID_BYTES= NEW.REFERENCE_ID_BYTES;
END;
